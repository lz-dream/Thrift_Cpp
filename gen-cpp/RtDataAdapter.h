/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RtDataAdapter_H
#define RtDataAdapter_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Rtdb_types.h"

namespace cn { namespace oge { namespace kdm { namespace rtdb { namespace thrift { namespace api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RtDataAdapterIf {
 public:
  virtual ~RtDataAdapterIf() {}

  /**
   * 读取最新数据
   * 
   * @param codes 测点编码列表
   */
  virtual void readLatestData(std::map<std::string, RtSnapshotData> & _return, const std::vector<std::string> & codes) = 0;

  /**
   * 读取原始历史数据
   * 
   * @param codes 测点编码列表
   * 
   * @param startTime 开始时间(自1970年起的毫秒数)
   * 
   * @param endTime 结束时间(自1970年起的毫秒数)(不包含)
   */
  virtual void readHistoryData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime) = 0;

  /**
   * 读取插值历史数据
   * 
   * @param codes 测点编码列表
   * 
   * @param startTime 开始时间(自1970年起的毫秒数)
   * 
   * @param endTime 结束时间(自1970年起的毫秒数)(不包含)
   * 
   * @param interval 时间间隔(单位: 秒): 按照默认插值算法对数据进行稀疏或补齐, 以确保数据以此间隔呈现
   */
  virtual void readInterpolationData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval) = 0;

  /**
   * 读取分段统计数据
   * 
   * @param codes 测点编码列表
   * 
   * @param startTime 开始时间
   * 
   * @param endTime 结束时间(自1970年起的毫秒数)(不包含)
   * 
   * @param types 统计类型
   * 
   * @param segments 所分段数
   */
  virtual void readSummaryData(std::map<std::string, RtSummaryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments) = 0;
};

class RtDataAdapterIfFactory {
 public:
  typedef RtDataAdapterIf Handler;

  virtual ~RtDataAdapterIfFactory() {}

  virtual RtDataAdapterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RtDataAdapterIf* /* handler */) = 0;
};

class RtDataAdapterIfSingletonFactory : virtual public RtDataAdapterIfFactory {
 public:
  RtDataAdapterIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf>& iface) : iface_(iface) {}
  virtual ~RtDataAdapterIfSingletonFactory() {}

  virtual RtDataAdapterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RtDataAdapterIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> iface_;
};

class RtDataAdapterNull : virtual public RtDataAdapterIf {
 public:
  virtual ~RtDataAdapterNull() {}
  void readLatestData(std::map<std::string, RtSnapshotData> & /* _return */, const std::vector<std::string> & /* codes */) {
    return;
  }
  void readHistoryData(std::map<std::string, RtHistoryData> & /* _return */, const std::vector<std::string> & /* codes */, const int64_t /* startTime */, const int64_t /* endTime */) {
    return;
  }
  void readInterpolationData(std::map<std::string, RtHistoryData> & /* _return */, const std::vector<std::string> & /* codes */, const int64_t /* startTime */, const int64_t /* endTime */, const int32_t /* interval */) {
    return;
  }
  void readSummaryData(std::map<std::string, RtSummaryData> & /* _return */, const std::vector<std::string> & /* codes */, const int64_t /* startTime */, const int64_t /* endTime */, const std::set<RtSummaryType::type> & /* types */, const int32_t /* segments */) {
    return;
  }
};

typedef struct _RtDataAdapter_readLatestData_args__isset {
  _RtDataAdapter_readLatestData_args__isset() : codes(false) {}
  bool codes :1;
} _RtDataAdapter_readLatestData_args__isset;

class RtDataAdapter_readLatestData_args {
 public:

  RtDataAdapter_readLatestData_args(const RtDataAdapter_readLatestData_args&);
  RtDataAdapter_readLatestData_args& operator=(const RtDataAdapter_readLatestData_args&);
  RtDataAdapter_readLatestData_args() {
  }

  virtual ~RtDataAdapter_readLatestData_args() throw();
  std::vector<std::string>  codes;

  _RtDataAdapter_readLatestData_args__isset __isset;

  void __set_codes(const std::vector<std::string> & val);

  bool operator == (const RtDataAdapter_readLatestData_args & rhs) const
  {
    if (!(codes == rhs.codes))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readLatestData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readLatestData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RtDataAdapter_readLatestData_pargs {
 public:


  virtual ~RtDataAdapter_readLatestData_pargs() throw();
  const std::vector<std::string> * codes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readLatestData_result__isset {
  _RtDataAdapter_readLatestData_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readLatestData_result__isset;

class RtDataAdapter_readLatestData_result {
 public:

  RtDataAdapter_readLatestData_result(const RtDataAdapter_readLatestData_result&);
  RtDataAdapter_readLatestData_result& operator=(const RtDataAdapter_readLatestData_result&);
  RtDataAdapter_readLatestData_result() {
  }

  virtual ~RtDataAdapter_readLatestData_result() throw();
  std::map<std::string, RtSnapshotData>  success;
  RequestException e;

  _RtDataAdapter_readLatestData_result__isset __isset;

  void __set_success(const std::map<std::string, RtSnapshotData> & val);

  void __set_e(const RequestException& val);

  bool operator == (const RtDataAdapter_readLatestData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readLatestData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readLatestData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readLatestData_presult__isset {
  _RtDataAdapter_readLatestData_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readLatestData_presult__isset;

class RtDataAdapter_readLatestData_presult {
 public:


  virtual ~RtDataAdapter_readLatestData_presult() throw();
  std::map<std::string, RtSnapshotData> * success;
  RequestException e;

  _RtDataAdapter_readLatestData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RtDataAdapter_readHistoryData_args__isset {
  _RtDataAdapter_readHistoryData_args__isset() : codes(false), startTime(false), endTime(false) {}
  bool codes :1;
  bool startTime :1;
  bool endTime :1;
} _RtDataAdapter_readHistoryData_args__isset;

class RtDataAdapter_readHistoryData_args {
 public:

  RtDataAdapter_readHistoryData_args(const RtDataAdapter_readHistoryData_args&);
  RtDataAdapter_readHistoryData_args& operator=(const RtDataAdapter_readHistoryData_args&);
  RtDataAdapter_readHistoryData_args() : startTime(0), endTime(0) {
  }

  virtual ~RtDataAdapter_readHistoryData_args() throw();
  std::vector<std::string>  codes;
  int64_t startTime;
  int64_t endTime;

  _RtDataAdapter_readHistoryData_args__isset __isset;

  void __set_codes(const std::vector<std::string> & val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  bool operator == (const RtDataAdapter_readHistoryData_args & rhs) const
  {
    if (!(codes == rhs.codes))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readHistoryData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readHistoryData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RtDataAdapter_readHistoryData_pargs {
 public:


  virtual ~RtDataAdapter_readHistoryData_pargs() throw();
  const std::vector<std::string> * codes;
  const int64_t* startTime;
  const int64_t* endTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readHistoryData_result__isset {
  _RtDataAdapter_readHistoryData_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readHistoryData_result__isset;

class RtDataAdapter_readHistoryData_result {
 public:

  RtDataAdapter_readHistoryData_result(const RtDataAdapter_readHistoryData_result&);
  RtDataAdapter_readHistoryData_result& operator=(const RtDataAdapter_readHistoryData_result&);
  RtDataAdapter_readHistoryData_result() {
  }

  virtual ~RtDataAdapter_readHistoryData_result() throw();
  std::map<std::string, RtHistoryData>  success;
  RequestException e;

  _RtDataAdapter_readHistoryData_result__isset __isset;

  void __set_success(const std::map<std::string, RtHistoryData> & val);

  void __set_e(const RequestException& val);

  bool operator == (const RtDataAdapter_readHistoryData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readHistoryData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readHistoryData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readHistoryData_presult__isset {
  _RtDataAdapter_readHistoryData_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readHistoryData_presult__isset;

class RtDataAdapter_readHistoryData_presult {
 public:


  virtual ~RtDataAdapter_readHistoryData_presult() throw();
  std::map<std::string, RtHistoryData> * success;
  RequestException e;

  _RtDataAdapter_readHistoryData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RtDataAdapter_readInterpolationData_args__isset {
  _RtDataAdapter_readInterpolationData_args__isset() : codes(false), startTime(false), endTime(false), interval(false) {}
  bool codes :1;
  bool startTime :1;
  bool endTime :1;
  bool interval :1;
} _RtDataAdapter_readInterpolationData_args__isset;

class RtDataAdapter_readInterpolationData_args {
 public:

  RtDataAdapter_readInterpolationData_args(const RtDataAdapter_readInterpolationData_args&);
  RtDataAdapter_readInterpolationData_args& operator=(const RtDataAdapter_readInterpolationData_args&);
  RtDataAdapter_readInterpolationData_args() : startTime(0), endTime(0), interval(0) {
  }

  virtual ~RtDataAdapter_readInterpolationData_args() throw();
  std::vector<std::string>  codes;
  int64_t startTime;
  int64_t endTime;
  int32_t interval;

  _RtDataAdapter_readInterpolationData_args__isset __isset;

  void __set_codes(const std::vector<std::string> & val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_interval(const int32_t val);

  bool operator == (const RtDataAdapter_readInterpolationData_args & rhs) const
  {
    if (!(codes == rhs.codes))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(interval == rhs.interval))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readInterpolationData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readInterpolationData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RtDataAdapter_readInterpolationData_pargs {
 public:


  virtual ~RtDataAdapter_readInterpolationData_pargs() throw();
  const std::vector<std::string> * codes;
  const int64_t* startTime;
  const int64_t* endTime;
  const int32_t* interval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readInterpolationData_result__isset {
  _RtDataAdapter_readInterpolationData_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readInterpolationData_result__isset;

class RtDataAdapter_readInterpolationData_result {
 public:

  RtDataAdapter_readInterpolationData_result(const RtDataAdapter_readInterpolationData_result&);
  RtDataAdapter_readInterpolationData_result& operator=(const RtDataAdapter_readInterpolationData_result&);
  RtDataAdapter_readInterpolationData_result() {
  }

  virtual ~RtDataAdapter_readInterpolationData_result() throw();
  std::map<std::string, RtHistoryData>  success;
  RequestException e;

  _RtDataAdapter_readInterpolationData_result__isset __isset;

  void __set_success(const std::map<std::string, RtHistoryData> & val);

  void __set_e(const RequestException& val);

  bool operator == (const RtDataAdapter_readInterpolationData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readInterpolationData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readInterpolationData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readInterpolationData_presult__isset {
  _RtDataAdapter_readInterpolationData_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readInterpolationData_presult__isset;

class RtDataAdapter_readInterpolationData_presult {
 public:


  virtual ~RtDataAdapter_readInterpolationData_presult() throw();
  std::map<std::string, RtHistoryData> * success;
  RequestException e;

  _RtDataAdapter_readInterpolationData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RtDataAdapter_readSummaryData_args__isset {
  _RtDataAdapter_readSummaryData_args__isset() : codes(false), startTime(false), endTime(false), types(false), segments(false) {}
  bool codes :1;
  bool startTime :1;
  bool endTime :1;
  bool types :1;
  bool segments :1;
} _RtDataAdapter_readSummaryData_args__isset;

class RtDataAdapter_readSummaryData_args {
 public:

  RtDataAdapter_readSummaryData_args(const RtDataAdapter_readSummaryData_args&);
  RtDataAdapter_readSummaryData_args& operator=(const RtDataAdapter_readSummaryData_args&);
  RtDataAdapter_readSummaryData_args() : startTime(0), endTime(0), segments(0) {
  }

  virtual ~RtDataAdapter_readSummaryData_args() throw();
  std::vector<std::string>  codes;
  int64_t startTime;
  int64_t endTime;
  std::set<RtSummaryType::type>  types;
  int32_t segments;

  _RtDataAdapter_readSummaryData_args__isset __isset;

  void __set_codes(const std::vector<std::string> & val);

  void __set_startTime(const int64_t val);

  void __set_endTime(const int64_t val);

  void __set_types(const std::set<RtSummaryType::type> & val);

  void __set_segments(const int32_t val);

  bool operator == (const RtDataAdapter_readSummaryData_args & rhs) const
  {
    if (!(codes == rhs.codes))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(types == rhs.types))
      return false;
    if (!(segments == rhs.segments))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readSummaryData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readSummaryData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RtDataAdapter_readSummaryData_pargs {
 public:


  virtual ~RtDataAdapter_readSummaryData_pargs() throw();
  const std::vector<std::string> * codes;
  const int64_t* startTime;
  const int64_t* endTime;
  const std::set<RtSummaryType::type> * types;
  const int32_t* segments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readSummaryData_result__isset {
  _RtDataAdapter_readSummaryData_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readSummaryData_result__isset;

class RtDataAdapter_readSummaryData_result {
 public:

  RtDataAdapter_readSummaryData_result(const RtDataAdapter_readSummaryData_result&);
  RtDataAdapter_readSummaryData_result& operator=(const RtDataAdapter_readSummaryData_result&);
  RtDataAdapter_readSummaryData_result() {
  }

  virtual ~RtDataAdapter_readSummaryData_result() throw();
  std::map<std::string, RtSummaryData>  success;
  RequestException e;

  _RtDataAdapter_readSummaryData_result__isset __isset;

  void __set_success(const std::map<std::string, RtSummaryData> & val);

  void __set_e(const RequestException& val);

  bool operator == (const RtDataAdapter_readSummaryData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RtDataAdapter_readSummaryData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RtDataAdapter_readSummaryData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RtDataAdapter_readSummaryData_presult__isset {
  _RtDataAdapter_readSummaryData_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RtDataAdapter_readSummaryData_presult__isset;

class RtDataAdapter_readSummaryData_presult {
 public:


  virtual ~RtDataAdapter_readSummaryData_presult() throw();
  std::map<std::string, RtSummaryData> * success;
  RequestException e;

  _RtDataAdapter_readSummaryData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RtDataAdapterClient : virtual public RtDataAdapterIf {
 public:
  RtDataAdapterClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RtDataAdapterClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void readLatestData(std::map<std::string, RtSnapshotData> & _return, const std::vector<std::string> & codes);
  void send_readLatestData(const std::vector<std::string> & codes);
  void recv_readLatestData(std::map<std::string, RtSnapshotData> & _return);
  void readHistoryData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime);
  void send_readHistoryData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime);
  void recv_readHistoryData(std::map<std::string, RtHistoryData> & _return);
  void readInterpolationData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval);
  void send_readInterpolationData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval);
  void recv_readInterpolationData(std::map<std::string, RtHistoryData> & _return);
  void readSummaryData(std::map<std::string, RtSummaryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments);
  void send_readSummaryData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments);
  void recv_readSummaryData(std::map<std::string, RtSummaryData> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RtDataAdapterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RtDataAdapterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_readLatestData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readHistoryData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readInterpolationData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readSummaryData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RtDataAdapterProcessor(::apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> iface) :
    iface_(iface) {
    processMap_["readLatestData"] = &RtDataAdapterProcessor::process_readLatestData;
    processMap_["readHistoryData"] = &RtDataAdapterProcessor::process_readHistoryData;
    processMap_["readInterpolationData"] = &RtDataAdapterProcessor::process_readInterpolationData;
    processMap_["readSummaryData"] = &RtDataAdapterProcessor::process_readSummaryData;
  }

  virtual ~RtDataAdapterProcessor() {}
};

class RtDataAdapterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RtDataAdapterProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< RtDataAdapterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< RtDataAdapterIfFactory > handlerFactory_;
};

class RtDataAdapterMultiface : virtual public RtDataAdapterIf {
 public:
  RtDataAdapterMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RtDataAdapterMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> > ifaces_;
  RtDataAdapterMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<RtDataAdapterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void readLatestData(std::map<std::string, RtSnapshotData> & _return, const std::vector<std::string> & codes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readLatestData(_return, codes);
    }
    ifaces_[i]->readLatestData(_return, codes);
    return;
  }

  void readHistoryData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readHistoryData(_return, codes, startTime, endTime);
    }
    ifaces_[i]->readHistoryData(_return, codes, startTime, endTime);
    return;
  }

  void readInterpolationData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readInterpolationData(_return, codes, startTime, endTime, interval);
    }
    ifaces_[i]->readInterpolationData(_return, codes, startTime, endTime, interval);
    return;
  }

  void readSummaryData(std::map<std::string, RtSummaryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readSummaryData(_return, codes, startTime, endTime, types, segments);
    }
    ifaces_[i]->readSummaryData(_return, codes, startTime, endTime, types, segments);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RtDataAdapterConcurrentClient : virtual public RtDataAdapterIf {
 public:
  RtDataAdapterConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RtDataAdapterConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void readLatestData(std::map<std::string, RtSnapshotData> & _return, const std::vector<std::string> & codes);
  int32_t send_readLatestData(const std::vector<std::string> & codes);
  void recv_readLatestData(std::map<std::string, RtSnapshotData> & _return, const int32_t seqid);
  void readHistoryData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime);
  int32_t send_readHistoryData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime);
  void recv_readHistoryData(std::map<std::string, RtHistoryData> & _return, const int32_t seqid);
  void readInterpolationData(std::map<std::string, RtHistoryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval);
  int32_t send_readInterpolationData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const int32_t interval);
  void recv_readInterpolationData(std::map<std::string, RtHistoryData> & _return, const int32_t seqid);
  void readSummaryData(std::map<std::string, RtSummaryData> & _return, const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments);
  int32_t send_readSummaryData(const std::vector<std::string> & codes, const int64_t startTime, const int64_t endTime, const std::set<RtSummaryType::type> & types, const int32_t segments);
  void recv_readSummaryData(std::map<std::string, RtSummaryData> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}}}} // namespace

#endif
